# Mini-project #6 - Blackjack
# By T KARTIK KUMAR
# the cards in hands are displayed simultaneously on the console just for easy understanding
# importing important modules
import simplegui
import random

# loading card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initializing useful global variables
in_play = False
outcome = "HIT or STAND?"
player_score = dealer_score = 0
new_deal_started = False

# defining globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# defining Card class
class Card:
    # creating Card object
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank
    
    # returning string representation of a card
    def __str__(self):
        return self.suit + self.rank
    
    # getting the suit for a card
    def get_suit(self):
        return self.suit
    
    # getting the rank for a card
    def get_rank(self):
        return self.rank
    
    # drawing the tile image
    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# defining Hand class
class Hand:
    # creating Hand object
    def __init__(self):
        self.cards = []
        
    # returing a string representation of a hand
    def __str__(self):
        cardInHand = ""
        for card in self.cards:
            cardInHand += " "+ card.__str__()
        return "HAND CONTAINS" + cardInHand
                                    
    # adding a card object to a hand
    def add_card(self, card):
        self.cards.append(card)
        
    # computing the value of the hand
    def get_value(self):
        value = 0
        contains_an_ace = False
        # summing up value of each card
        for card in self.cards:
            rank = card.get_rank()
            value += VALUES[rank]
            if(rank == 'A'):
                contains_an_ace = True
        # adding extra value for an ace
        if(value < 11 and contains_an_ace):
            value += 10

        return value
    # drawing a hand on the canvas
    def draw(self, canvas, pos):
        for card in self.cards:
            card.draw(canvas, pos)
            pos[0] += 90	
 
 #defining Deck class 
class Deck:
    # creating a Deck object
    def __init__(self):
        self.cards = []
        for suit in SUITS:
            for rank in RANKS:
                self.cards.append(Card(suit,rank))
    
    # shuffling the deck
    def shuffle(self):
        random.shuffle(self.cards)
        
    # dealing a card object from the deck
    def deal_card(self):
        return self.cards.pop(0)
    
    # returning a string representing the deck
    def __str__(self):
        cardsInDeck = ""
        for card in self.cards:
            cardsInDeck += " "+ card.__str__()
        return "DECK CONTAINS" + cardsInDeck

#defining event handlers for buttons
def deal():
    global outcome, in_play,new_deal_started,deck, player_hand, dealer_hand, deck, dealer_score
    new_deal_started = True
    # if player is not in play
    if not in_play:
        # creating deck object
        deck = Deck()
        # shuffling the deck
        deck.shuffle()
        # supplying cards to player's and dealer's hand thorugh a Hand object
        player_hand = Hand()
        dealer_hand = Hand()
        player_hand.add_card(deck.deal_card())
        player_hand.add_card(deck.deal_card())
        dealer_hand.add_card(deck.deal_card())
        dealer_hand.add_card(deck.deal_card())
        print "PLAYER " + str(player_hand)
        print "DEALER " + str(dealer_hand)
        in_play = True
    # player is in play and starts another deal
    else:
        outcome = "Player lost!! Re-deal?"
        dealer_score += 1
        in_play = False

def hit():
    global outcome, in_play,dealer_score, new_deal_started
    # if hand is in play
    if in_play:
        if player_hand.get_value() <= 21:
            player_hand.add_card(deck.deal_card())

        print "PLAYER " + str(player_hand)
        # checking whether the player is busted or not
        if player_hand.get_value() > 21:
            outcome = "You have busted. New deal?"
            dealer_score += 1
            in_play = False
            print "You have busted"
            new_deal_started = False     
    else:
        outcome = "Sorry, you are not in play"

def stand():
    global outcome,new_deal_started, player_score, dealer_score, in_play
       
    if new_deal_started:
        
        in_play = False
        # repeatedly hit dealer until his hand has value 17 or more
        while dealer_hand.get_value() < 17:
            dealer_hand.add_card(deck.deal_card())

        print "DEALER " + str(dealer_hand)
        
        # deciding who wins the game(a tie goes in the dealer's favor)
        # checking whether the dealer got busted or not
        if dealer_hand.get_value() <= 21:
            if dealer_hand.get_value() >= player_hand.get_value():
                print "Dealer wins"
                outcome = "Dealer wins. New deal?"
                dealer_score += 1
            else:
                print "Player wins. New deal?"
                outcome = "Player wins"
                player_score += 1
        else:
            outcome = "Dealer busted. Congratulations!"
            print "Dealer is busted. Player wins."
            player_score += 1
        
        new_deal_started = False

    else:
        outcome = "Please Start a new deal!"
   

 # defining draw handler    
def draw(canvas):
    global outcome, in_play, card_back, card_loc, player_score, dealer_score

    canvas.draw_text("BLACKJACK", [160, 60], 50 ,"Yellow")
    canvas.draw_text(outcome, [70, 130], 30 ,"White")

    canvas.draw_text("DEALER :" + str(dealer_score), [250, 200], 30 ,"White")
    canvas.draw_text("PLAYER : " + str(player_score), [250, 350], 30 ,"White")
    
    player_hand.draw(canvas, [70, 370])
    dealer_hand.draw(canvas, [70, 220])

    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, (106,269), CARD_BACK_SIZE)
       
    
# initializing the frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#creating buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

deal()
frame.start()
